'use client';

import React, { createContext, useState, useEffect, useContext } from 'react';
import Cookies from 'js-cookie';

import { ModeType } from '../gluestack-ui-provider/config';
import { useColorScheme } from '../../../hooks/useColorScheme';

type ThemeContextType = {
  isDarkTheme: boolean;
  theme: ModeType;
  toggleTheme: () => void;
};

export const ThemeContext = createContext<ThemeContextType | null>(null);

export const ThemeProvider = ({ children }: { children: React.ReactNode }) => {
  const { colorScheme, isDarkColorScheme, setColorScheme } = useColorScheme();
  const [isColorSchemeLoaded, setIsColorSchemeLoaded] = useState(false);

  useEffect(() => {
    const theme = Cookies.get('theme') as ModeType | undefined;

    // Adds the background color to the html element to prevent white background on overscroll.
    document.documentElement.classList.add('bg-background');

    if (!theme) {
      Cookies.set('theme', colorScheme, { expires: 365 });
      setIsColorSchemeLoaded(true);

      return;
    }

    const colorTheme = theme === 'dark' ? 'dark' : 'light';

    if (colorTheme !== colorScheme) {
      setColorScheme(colorTheme);

      document.documentElement.classList.add(colorTheme);
      document.documentElement.style.colorScheme = colorTheme;

      setIsColorSchemeLoaded(true);

      return;
    }

    document.documentElement.classList.add(colorTheme);
    document.documentElement.style.colorScheme = colorTheme;

    setIsColorSchemeLoaded(true);
  }, []);

  const toggleTheme = () => {
    const newTheme = colorScheme === 'light' ? 'dark' : 'light';

    setColorScheme(newTheme);

    Cookies.set('theme', newTheme, { expires: 365 });

    document.documentElement.classList.remove(colorScheme);
    document.documentElement.classList.add(newTheme);
    document.documentElement.style.colorScheme = newTheme;
  };

  if (!isColorSchemeLoaded) return null;

  return (
    <ThemeContext.Provider
      value={{
        isDarkTheme: isDarkColorScheme,
        theme: colorScheme,
        toggleTheme,
      }}
    >
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);

  if (!context) throw new Error('useTheme must be used within a ThemeProvider');

  return context;
};
