'use client';

import React, { createContext, useState, useEffect, useContext } from 'react';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  Theme,
  ThemeProvider as NativeThemeProvider,
} from '@react-navigation/native';
import { SplashScreen } from 'expo-router';

import { setAndroidNavigationBar } from './android-navigation-bar';
import { config, ModeType } from '../gluestack-ui-provider/config';
import { useColorScheme } from '../../../hooks/useColorScheme';

const DARK_THEME: Theme = { dark: true, colors: config.dark };
const LIGHT_THEME: Theme = { dark: false, colors: config.light };

// Prevent the splash screen from auto-hiding before getting the color scheme.
SplashScreen.preventAutoHideAsync();

type ThemeContextType = {
  isDarkTheme: boolean;
  theme: ModeType;
  toggleTheme: () => void;
};

export const ThemeContext = createContext<ThemeContextType | null>(null);

export const ThemeProvider = ({ children }: { children: React.ReactNode }) => {
  const { colorScheme, setColorScheme, isDarkColorScheme } = useColorScheme();
  const [isColorSchemeLoaded, setIsColorSchemeLoaded] = useState(false);

  useEffect(() => {
    (async () => {
      const theme = await AsyncStorage.getItem('theme');

      if (Platform.OS === 'web') {
        // Adds the background color to the html element to prevent white background on overscroll.
        document.documentElement.classList.add('bg-background');
      }

      if (!theme) {
        AsyncStorage.setItem('theme', colorScheme);
        setIsColorSchemeLoaded(true);

        return;
      }

      const colorTheme = theme === 'dark' ? 'dark' : 'light';

      if (colorTheme !== colorScheme) {
        setColorScheme(colorTheme);
        setAndroidNavigationBar(colorTheme);
        setIsColorSchemeLoaded(true);

        return;
      }

      setAndroidNavigationBar(colorTheme);
      setIsColorSchemeLoaded(true);
    })().finally(() => {
      SplashScreen.hideAsync();
    });
  }, []);

  const toggleTheme = () => {
    const newTheme = colorScheme === 'light' ? 'dark' : 'light';

    setColorScheme(newTheme);
    AsyncStorage.setItem('theme', newTheme);
  };

  if (!isColorSchemeLoaded) return null;

  return (
    <NativeThemeProvider value={isDarkColorScheme ? DARK_THEME : LIGHT_THEME}>
      <ThemeContext.Provider
        value={{
          isDarkTheme: isDarkColorScheme,
          theme: colorScheme,
          toggleTheme,
        }}
      >
        {children}
      </ThemeContext.Provider>
    </NativeThemeProvider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);

  if (!context) throw new Error('useTheme must be used within a ThemeProvider');

  return context;
};
