import chalk from 'chalk';

import type { Union2Tuple } from '<%= typesLibImportPath %>';

export const LOG_LEVELS = {
  verbose: 0,
  trace: 1,
  debug: 2,
  success: 3,
  info: 4,
  warn: 5,
  error: 6,
  fatal: 7,
} as const;

export const LOG_COLORS = {
  bg: {
    verbose: '#FEFEFE',
    trace: '#DFF2BF',
    debug: '#FFF',
    success: '#77C926',
    info: '#BDE5F8',
    warn: '#EFEFB3',
    error: '#FFBABA',
    fatal: '#FF805C',
  },
  border: {
    verbose: '#AAAAAA',
    trace: '#4F8A10',
    debug: '#222222',
    success: '#30740C',
    info: '#00529B',
    warn: '#9F6000',
    error: '#D8000C',
    fatal: '#7A071A',
  },
  text: {
    verbose: '#AAAAAA',
    trace: '#4F8A10',
    debug: '#222222',
    success: '#FEFEFE',
    info: '#00529B',
    warn: '#9F6000',
    error: '#D8000C',
    fatal: '#7A071A',
  },
} as const;

const LOG_ICONS = {
  verbose: 'ℹ',
  trace: '→',
  debug: '⚙',
  success: '✓',
  info: 'ℹ',
  warn: '⚠️',
  error: '⨯',
  fatal: '⨯',
};

function getIcon(icon: string) {
  const level = icon.toLowerCase() as keyof typeof LOG_ICONS;

  return LOG_ICONS[level];
}

function colorize(str: string, level: LogLevel) {
  level = level.toLowerCase() as LogLevel;

  return chalk.bgHex(LOG_COLORS.bg[level]).hex(LOG_COLORS.text[level])(str);
}

function colorizeText(str: string, level: LogLevel) {
  level = level.toLowerCase() as LogLevel;

  return chalk.hex(LOG_COLORS.text[level])(str);
}

export const LOGS_CONFIG = {
  colors: LOG_COLORS,
  icons: LOG_ICONS,
  levels: LOG_LEVELS,
  getIcon,
  colorize,
  colorizeText,
} as const;

export const logLevels = LOGS_CONFIG.levels;
export const logIcons = LOGS_CONFIG.icons;
export const logColors = LOGS_CONFIG.colors;

export type LogLevel = keyof typeof logLevels;
export type LogLevels = Union2Tuple<LogLevel>;
