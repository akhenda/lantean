/* eslint-disable line-comment-position */

export type ObjectValues<T> = T[keyof T];

// https://www.hacklewayne.com/typescript-convert-union-to-tuple-array-yes-but-how
type Contra<T> = T extends any ? (arg: T) => void : never;
type InferContra<T> = [T] extends [(arg: infer I) => void] ? I : never;
type PickOne<T> = InferContra<InferContra<Contra<Contra<T>>>>;

export type Union2Tuple<T> =
  PickOne<T> extends infer U // assign PickOne<T> to U
    ? Exclude<T, U> extends never // T and U are the same
      ? [T]
      : [...Union2Tuple<Exclude<T, U>>, U] // recursion
    : never;
