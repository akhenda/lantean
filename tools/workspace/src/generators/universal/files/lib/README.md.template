# Mobile

This project holds all shared mobile UI logic

## Setup

Do the following steps for all NX generated Expo projects.

### Nativewind Setup

- [Nativewind Expo Router Setup](https://www.nativewind.dev/v4/getting-started/expo-router)

#### 1. Install NativeWind

Nativewind, Tailwind & RN Animated are already installed for you.

#### 2. Setup Tailwind CSS

Create a `tailwind.config.js` file at the roor of your expo app/project. Then, extend the base tailwind.config.ts file from this shared UI project.

```js
const { buildConfig } = require('<%= importPath %>/design/<%= uiName %>//tailwind.config');

/** @type {import('tailwindcss').Config} */
module.exports = buildConfig(__dirname);
```

#### 3. Add the Babel preset

Modify your `babel.config.js`

```js
module.exports = function (api) {
  api.cache(true);
  return {
    presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }], 'nativewind/babel'],
  };
};
```

#### 4. Modify your metro.config.js

If your project does not have a `metro.config.js` run `npx expo customize metro.config.js`

```js
const { getDefaultConfig } = require('expo/metro-config');
const { withNativeWind } = require('nativewind/metro');

const config = getDefaultConfig(__dirname, { isCSSEnabled: true });

module.exports = withNativeWind(config, { inlineRem: 16, input: '<%= importPath %>/design/<%= uiName %>/global.css' });
```

#### 5. Use the lib in your app/project

##### For Native

In Expo, wrap your app with `GluestackUIProvider` in `App.tsx`. With Expo Router, update the existing root layout file to include `GluestackUIProvider`.

```js
// app/_layout.js
import { Slot } from 'expo-router';

import { GluestackUIProvider } from '<%= importPath %>/design/<%= uiName %>/components/ui/gluestack-ui-provider';

// Import your global CSS file
import '<%= importPath %>/design/<%= uiName %>/global.css';

export default function RootLayout() {
  return (
    <GluestackUIProvider>
      <Slot />
    </GluestackUIProvider>
  );
}
```

##### For Web (Next.js)

For Next.js App Routers we will create a new `registry.tsx` file in the root of your project and use the flush function from `@gluestack-ui/nativewind-utils`

```ts
'use client';

import React, { useRef, useState } from 'react';
import { useServerInsertedHTML } from 'next/navigation';
import { Main } from 'next/document';
import { StyleRegistry, createStyleRegistry } from 'styled-jsx';
import { AppRegistry } from 'react-native-web';
import { flush } from '@gluestack-ui/nativewind-utils/flush';

export default function StyledJsxRegistry({
  children,
}: {
  children: React.ReactNode;
}) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [jsxStyleRegistry] = useState(() => createStyleRegistry());
  const isServerInserted = useRef(false);

  useServerInsertedHTML(() => {
    AppRegistry.registerComponent('Main', () => Main);

    const { getStyleElement } = AppRegistry.getApplication('Main');

    console.log(getStyleElement());

    if (!isServerInserted.current) {
      isServerInserted.current = true;

      const styles = [getStyleElement(), jsxStyleRegistry.styles(), flush()];

      jsxStyleRegistry.flush();

      return <>{styles}</>;
    }
  });

  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>;
}
```

We also need to wrap `children` with `StyledJsxRegistry` in the `layout.tsx` file.

```ts
'use client';

import { Inter } from 'next/font/google';

import './globals.css';

import { GluestackUIProvider } from './components/ui/gluestack-ui-provider';
import StyledJsxRegistry from './registry';

const inter = Inter({ subsets: ['latin'] });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className} style={{ display: 'flex' }}>
        <StyledJsxRegistry>
          <GluestackUIProvider mode="light">{children}</GluestackUIProvider>
        </StyledJsxRegistry>
      </body>
    </html>
  );
}
```

###### OR - You can just use the provided `root-layout.tsx` files from this library

```js
// src/app/_layout.js
import RootLayout from '<%= importPath %>/design/<%= uiName %>/root-layout';

export default RootLayout;
```

#### 6. Configure Typescript for your App

NativeWind extends the React Native types via declaration merging. The simplest method to include the types is to create a new nativewind-env.d.ts file and add a triple-slash directive referencing the types.

```ts
/// <reference types="nativewind/types" />
```

> ⚠️ CAUTION
>
> Do not call this file:
>
> - `nativewind.d.ts`
> - The same name as a file or folder in the same directory e.g app.d.ts when an /app folder exists
> - The same name as a folder in node_modules, e.g react.d.ts
>
> By doing so, your types will not be picked up by the TypeScript compiler.

#### 7. Thats it 🎉

Start writing code!
